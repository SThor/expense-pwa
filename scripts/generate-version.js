#!/usr/bin/env node

/* eslint-disable import/no-nodejs-modules */
import { execSync } from "child_process";
import { writeFileSync } from "fs";
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";

function getGitInfo() {
  try {
    // Get the current branch
    const branch = execSync("git rev-parse --abbrev-ref HEAD", {
      encoding: "utf8",
    }).trim();

    // Get the short commit hash
    const commit = execSync("git rev-parse --short HEAD", {
      encoding: "utf8",
    }).trim();

    // Check if working directory is dirty (both staged and unstaged changes)
    let isDirty = false;
    try {
      execSync("git diff --quiet", { encoding: "utf8" });
      execSync("git diff --cached --quiet", { encoding: "utf8" });
    } catch (e) {
      isDirty = true;
    }

    // Try to get the latest tag
    let tag = null;
    try {
      tag = execSync("git describe --tags --abbrev=0", {
        encoding: "utf8",
      }).trim();
    } catch (e) {
      // No tags exist
    }

    // Get the build timestamp
    const buildTime = new Date().toISOString();

    return {
      tag,
      branch,
      commit,
      isDirty,
      buildTime,
      version: tag || `${branch}-${commit}${isDirty ? "-dirty" : ""}`,
      shortVersion: tag || commit,
    };
  } catch (error) {
    console.warn("Could not get git information:", error.message);
    return {
      tag: null,
      branch: "unknown",
      commit: "unknown",
      isDirty: false,
      buildTime: new Date().toISOString(),
      version: "unknown",
      shortVersion: "unknown",
    };
  }
}

function generateVersionFile() {
  const gitInfo = getGitInfo();

  const versionContent = `// This file is auto-generated by scripts/generate-version.js
// Do not edit manually

export const VERSION_INFO = ${JSON.stringify(gitInfo, null, 2)};

export const getVersionString = () => {
  return VERSION_INFO.version;
};

export const getShortVersionString = () => {
  return VERSION_INFO.shortVersion;
};
`;

  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  const outputPath = resolve(__dirname, "../src/version.js");
  writeFileSync(outputPath, versionContent);

  console.log(`Generated version file: ${outputPath}`);
  console.log(`Version: ${gitInfo.version}`);
}

// Generate version file
generateVersionFile();

export { generateVersionFile, getGitInfo };
